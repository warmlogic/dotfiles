#!/usr/bin/env bash

# git log for a given number of previous commits
function gl() {
    git l -n "${1:-20}"
}

# git log with add/delete stats for a given number of previous commits
function glstat() {
    git l -n "${1:-3}" --stat
}

# Create a new directory and enter it
function mkd() {
    mkdir -p "$@" && cd "$_";
}

# Change working directory to the top-most Finder window location
function cdf() { # short for `cdfinder`
    cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
    local tmpFile="${@%/}.tar";
    tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

    size=$(
        stat -f"%z" "${tmpFile}" 2> /dev/null; # macOS `stat`
        stat -c"%s" "${tmpFile}" 2> /dev/null;  # GNU `stat`
    );

    local cmd="";
    if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
        # the .tar file is smaller than 50 MB and Zopfli is available; use it
        cmd="zopfli";
    else
        if hash pigz 2> /dev/null; then
            cmd="pigz";
        else
            cmd="gzip";
        fi;
    fi;

    echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`…";
    "${cmd}" -v "${tmpFile}" || return 1;
    [ -f "${tmpFile}" ] && rm "${tmpFile}";

    zippedSize=$(
        stat -f"%z" "${tmpFile}.gz" 2> /dev/null; # macOS `stat`
        stat -c"%s" "${tmpFile}.gz" 2> /dev/null; # GNU `stat`
    );

    echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully.";
}

# Determine size of a file or total size of a directory
function fs() {
    if du -b /dev/null > /dev/null 2>&1; then
        local arg=-sbh;
    else
        local arg=-sh;
    fi
    if [[ -n "$@" ]]; then
        du $arg -- "$@";
    else
        du $arg .[^.]* ./*;
    fi;
}

# Use Git’s colored diff when available
hash git &>/dev/null;
if [ $? -eq 0 ]; then
    function diff() {
        git diff --no-index --color-words "$@";
    }
fi;

# Create a data URL from a file
function dataurl() {
    local mimeType=$(file -b --mime-type "$1");
    if [[ $mimeType == text/* ]]; then
        mimeType="${mimeType};charset=utf-8";
    fi
    echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
    local port="${1:-8000}";
    sleep 1 && open "http://localhost:${port}/" &
    # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
    # And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
    python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}

# # Start a PHP server from a directory, optionally specifying the port
# # (Requires PHP 5.4.0+.)
# function phpserver() {
#     local port="${1:-4000}";
#     local ip=$(ipconfig getifaddr en1);
#     sleep 1 && open "http://${ip}:${port}/" &
#     php -S "${ip}:${port}";
# }

# Compare original and gzipped file size
function gz() {
    local origsize=$(wc -c < "$1");
    local gzipsize=$(gzip -c "$1" | wc -c);
    local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l);
    printf "orig: %d bytes\n" "$origsize";
    printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio";
}

# Run `dig` and display the most useful info
function digga() {
    dig +nocmd "$1" any +multiline +noall +answer;
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames() {
    if [ -z "${1}" ]; then
        echo "ERROR: No domain specified.";
        return 1;
    fi;

    local domain="${1}";
    echo "Testing ${domain}…";
    echo ""; # newline

    local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
        | openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

    if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
        local certText=$(echo "${tmp}" \
            | openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
            no_serial, no_sigdump, no_signame, no_validity, no_version");
        echo "Common Name:";
        echo ""; # newline
        echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
        echo ""; # newline
        echo "Subject Alternative Name(s):";
        echo ""; # newline
        echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
            | sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
        return 0;
    else
        echo "ERROR: Certificate not found.";
        return 1;
    fi;
}

# `c` with no arguments opens the current directory in VS Code, otherwise
# opens the given location
function c() {
    if [ $# -eq 0 ]; then
        code .;
    else
        code "$@";
    fi;
}

# `cn` with no arguments opens the current directory in VS Code in a
# new window, otherwise opens the given location in a new window
function cn() {
    if [ $# -eq 0 ]; then
        code -n .;
    else
        code -n "$@";
    fi;
}

# `s` with no arguments opens the current directory in Sublime Text, otherwise
# opens the given location
function s() {
    if [ $# -eq 0 ]; then
        subl .;
    else
        subl "$@";
    fi;
}

# `sn` with no arguments opens the current directory in Sublime Text in a
# new window, otherwise opens the given location in a new window
function sn() {
    if [ $# -eq 0 ]; then
        subl -n .;
    else
        subl -n "$@";
    fi;
}

# `v` with no arguments opens the current directory in Vim, otherwise opens the
# given location
function v() {
    if [ $# -eq 0 ]; then
        vim .;
    else
        vim "$@";
    fi;
}

# `e` with no arguments opens the current directory in Emacs, otherwise opens the
# given location
function e() {
  if [ $# -eq 0 ]; then
      emacs .;
  else
      emacs "$@";
  fi;
}

# function e() {
#     if [ $# -eq 0 ]; then
#         open -a /Applications/Aquamacs.app .;
#         # /Applications/Aquamacs.app/Contents/MacOS/Aquamacs .;
#     else
#         # Create the files as needed -- not as good as raw emacs, but acceptable
#         for f in "$@"
#         do
#             test -e $f || touch $f
#         done
#         open -a /Applications/Aquamacs.app "$@"
#         # /Applications/Aquamacs.app/Contents/MacOS/Aquamacs "$@"
#     fi;
# }

# Normalize `open` across Linux, macOS, and Windows.
# This is needed to make the `o` function (see below) cross-platform.
if [ ! $(uname -s) = 'Darwin' ]; then
    if grep -q Microsoft /proc/version; then
        # Ubuntu on Windows using the Linux subsystem
        alias open='explorer.exe';
    else
        alias open='xdg-open';
    fi
fi

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
    if [ $# -eq 0 ]; then
        open .;
    else
        open "$@";
    fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
    tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

# functions for setting up template Jupyter Notebooks
function nb-presentationnb () {
    # Usage: nb-presentationnb [filename_suffix]
    # Will download the most up-to-date Template notebook named with:
    # today's date, your initials, and [an optional suffix].
    # `nb-presentationnb project_findings` would yield a file named:
    # 2016-08-12_mvm_project_findings.ipynb
    # wget version - won't overwrite
    wget -nc --show-progress --header "Accept: application/vnd.github.v3.raw" \
    -O `date +%Y-%m-%d`_${MY_INITIALS}_$1.ipynb \
    https://api.github.com/repos/${GITHUB_USERNAME}/jupyter_setup/contents/notebooks/template-presentation-python.ipynb
    # # curl version - will overwrite
    # curl -H 'Accept: application/vnd.github.v3.raw' -L \
    # https://api.github.com/repos/${GITHUB_USERNAME}/jupyter_setup/contents/notebooks/template-presentation-python.ipynb \
    # -o `date +%Y-%m-%d`_${MY_INITIALS}_$1.ipynb
}

function nb-dailynb () {
    # Usage: nb-dailynb [filename_suffix]
    # Will download the most up-to-date Template notebook named with:
    # today's date, your initials, and [an optional suffix].
    # `nb-dailynb exploratory_data_analysis` would yield a file named:
    # 2016-08-12_mvm_exploratory_data_analysis.ipynb
    # wget version - won't overwrite
    wget -nc --show-progress --header "Accept: application/vnd.github.v3.raw" \
    -O `date +%Y-%m-%d`_${MY_INITIALS}_$1.ipynb \
    https://api.github.com/repos/${GITHUB_USERNAME}/jupyter_setup/contents/notebooks/template-daily-python.ipynb
    # # curl version - will overwrite
    # curl -H 'Accept: application/vnd.github.v3.raw' -L \
    # https://api.github.com/repos/${GITHUB_USERNAME}/jupyter_setup/contents/notebooks/template-daily-python.ipynb \
    # -o `date +%Y-%m-%d`_${MY_INITIALS}_$1.ipynb
}

# Create directory structure in current working directory
# Inspired by https://drivendata.github.io/cookiecutter-data-science/
# TODO: initialize Makefile, requirements.txt, split notebook (develop/deliver?)
function nb-create-project () {
    directories='data
    docs
    models
    notebooks
    references
    reports
    src'

    ignore='.DS_Store\n*~\n*.pyc\n.ipynb_checkpoints\n__pycache__\n/data/*\n.env\nconfig.ini\n.vscode'
    # ignore_nb='.DS_Store\n*~\n*.pyc\n.ipynb_checkpoints\n__pycache__'

    if [ ! -f README.md ]; then
        touch README.md
    else
        echo 'README.md already exists, not touching'
    fi
    if [ ! -f .gitignore ]; then
        echo -e ${ignore} >> .gitignore
    else
        echo './.gitignore already exists, not initializing'
    fi
    for dir_name in ${directories}
    do
      mkdir -p $dir_name
      if [ $dir_name = "src" ]; then
        mkdir -p $dir_name/data
        mkdir -p $dir_name/features
        mkdir -p $dir_name/models
        mkdir -p $dir_name/visualization
        # mkdir -p $dir_name/sql
        touch $dir_name/data/__init__.py
        touch $dir_name/features/__init__.py
        touch $dir_name/models/__init__.py
        touch $dir_name/visualization/__init__.py
      fi
      if [ $dir_name = "data" ]; then
        mkdir -p $dir_name/external
        mkdir -p $dir_name/interim
        mkdir -p $dir_name/processed
        mkdir -p $dir_name/raw
      fi
    #   if [ $dir_name = "notebooks" ]; then
    #     if [ ! -f $dir_name/.gitignore ]; then
    #       echo -e ${ignore_nb} >> $dir_name/.gitignore
    #     else
    #       echo $dir_name'/.gitignore already exists, not initializing'
    #     fi
    #   fi
    done
}

function brew_cask_check_updates () {
    for cask in $(brew list --cask -1); do
      echo -n "${cask} : ";
      caskLatest=$(brew info --cask $cask | head -1 | awk -F: '{print $2}' | tr -d '[[:space:]]');
      caskCurrentDir=$(brew info --cask $cask | grep -e "^$(brew --prefix).*/${cask}/"| head -1| awk '{print $1}');
      [ ! -d $(dirname ${caskCurrentDir})/${caskLatest} ] && echo "outdated ("$(basename ${caskCurrentDir})" -> "${caskLatest}")" || echo "current";
    done
}

# Retries a command a with backoff.
#
# The retry count is given by ATTEMPTS (default 100), the
# initial backoff timeout is given by TIMEOUT in seconds
# (default 5.)
#
# Successive backoffs increase the timeout by ~33%.
#
# Beware of set -e killing your whole script!
function try_till_success {
    local max_attempts=${ATTEMPTS-100}
    local timeout=${TIMEOUT-5}
    local attempt=0
    local exitCode=0

    until [[ $attempt -ge $max_attempts ]]
    do
        "$@"
        exitCode=$?

        if [[ $exitCode == 0 ]]
        then
            break
        fi

        echo "Failure $(( attempt + 1 )) / $max_attempts! Retrying in $timeout..." 1>&2
        sleep $timeout
        attempt=$(( attempt + 1 ))
        timeout=$(( timeout * 40 / 30 ))
    done

    if [[ $exitCode != 0 ]]
    then
        echo "You've failed me for the last time! ($@)" 1>&2
    fi

    return $exitCode
}
